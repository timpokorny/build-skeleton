<?xml version="1.0"?>
<!--
             This project is using the Portico Build System
 
      The Portico Build System is designed to support projects that
      must build multiple artefacts or distributions from a single,
      shared codebase. It is designed to be extended and allows all
      logic for a particular artefact or distribution to be located
      together to help make navigation of a large structure as easy
      as possible. For full details, see the online documentation:

             https://github.com/timpokorny/build-skeleton

         File: build.xml
      Purpose: The master build file. This file imports all system
               support files, declares common targets and extension
               points and imports all the child build files.
               Do not edit this file except to add new profiles.
-->
<project name="MYPROJECT" default="sandbox">

	<!-- =========================================================== -->
	<!--                      General Settings                       -->
	<!-- =========================================================== -->
	<description>
        Nice description of MYPROJECT
	</description>

	<!-- bring in the ant-contrib tasks -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
	<!-- bring in our custom tasks -->
	<taskdef resource="cpptaskdef.properties"/>
	<typedef resource="cpptypedef.properties"/>

	<!-- =========================================================== -->
	<!--               System Properties and Utilities               -->
	<!-- =========================================================== -->
	<import file="profiles/system.properties.xml"/>    <!-- standard set of common properties -->
	<import file="profiles/system.macros.xml"/>        <!-- standard set of common macros -->

	<!-- =========================================================== -->
	<!--                       Master Targets                        -->
	<!-- =========================================================== -->
	<target name="clean"
	        description="Removes all generated build artefacts"
	        depends="master.clean,common.clean"/>
	
	<target name="compile"
	        description="Compile all the production code"
	        depends="master.compile"/>

	<target name="test"
	        description="Compile and run the automated test suite"
	        depends="master.test"/>

	<target name="sandbox"
	        description="Create a sandbox environment to test and validate in"
	        depends="master.sandbox"/>

	<target name="installer"
	        description="Create an installer package from the sandbox"
	        depends="master.installer"/>

	<target name="release"
	        description="Clean, run all test sand generate a standard release package"
	        depends="clean,build.release,master.release,installer"/>

	<target name="release.thin"
	        description="Generate a standard release package, but skip the tests"
	        depends="clean,build.release,sandbox,installer"/>
			
	<!-- =========================================================== -->
	<!--                      Extension Points                       -->
	<!-- =========================================================== -->
	<!-- These extension points are defined for the various profile targets
	     to hook onto, thus allowing them to identify themselves as targets
	     that should be run as part of a particular global action.
	     
	     This means that when we run "compile", any imported targets that
	     are declared as an extensionOf "master.compile" will be executed.
	     
	     An extension point for each major build action is defined.
	-->
	<extension-point name="master.clean"/>
	<extension-point name="master.compile"/>
	<extension-point name="master.test"/>
	<extension-point name="master.sandbox"/>
	<extension-point name="master.installer"/>
	<extension-point name="master.release"/>

	<!-- =========================================================== -->
	<!--                        Build Profiles                       -->
	<!-- =========================================================== -->
	<!-- Platform neutral java build -->
	<include file="profiles/java.xml" as="java"/>

	<!-- Parent C++ build scaffolding to attach to -->
	<include file="profiles/cpp.xml" as="cpp"/>

	<!-- Mac OS X C++ and Installer profiles -->
	<include file="profiles/macosx/MODULE1.xml"      as="cpp.MODULE1"    if="platform.macosx"/>
	<include file="profiles/macosx/MODULE2.xml"      as="cpp.MODULE2"    if="platform.macosx"/>
	<include file="profiles/macosx/installer.xml"    as="installer"      if="platform.macosx"/>

	<!-- Linux C++ and Installer profiles -->
	<include file="profiles/linux/MODULE1.xml"       as="cpp.MODULE1"    if="platform.linux64"/>
	<include file="profiles/linux/MODULE2.xml"       as="cpp.MODULE2"    if="platform.linux64"/>
	<include file="profiles/linux/installer.xml"     as="installer"      if="platform.linux64"/>

	<!-- Windows C++ and Installer profiles -->
	<include file="profiles/windows/MODULE1.xml"     as="cpp.MODULE1"    if="platform.windows"/>
	<include file="profiles/windows/MODULE1.xml"     as="cpp.MODULE2"    if="platform.windows"/>
	<include file="profiles/windows/installer.xml"   as="installer"      if="platform.windows"/>

	<!-- =========================================================== -->
	<!-- Convenience targets for specifying debug or release builds. -->
	<!-- =========================================================== -->
	<target name="build.release" description="Set the release build flag for this run">
		<echo>Build flagged as a release build. Setting build.release property to true</echo>
		<property name="build.release" value="true"/>
	</target>

	<!-- =========================================================== -->
	<!--      Private Internal Targets. Do not modify or extend.     -->
	<!-- =========================================================== -->
	<target name="common.clean">
		<!-- Remove any top-level directories that might need to go -->
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
	</target>

</project>

