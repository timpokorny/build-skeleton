<?xml version="1.0"?>
<!--
             This project is using the Portico Build System
 
      The Portico Build System is designed to support projects that
      must build multiple artefacts or distributions from a single,
      shared codebase. It is designed to be extended and allows all
      logic for a particular artefact or distribution to be located
      together to help make navigation of a large structure as easy
      as possible. For full details, see the online documentation:

             https://github.com/timpokorny/build-skeleton

         File: profiles/cpp.xml
      Purpose: The master C++ build file. Depending on the platform,
               the main build.xml file will have included any number
               of C++ focused children. These files will have some
               common needs (source directories, libraries, etc...)
               which are defined in this file. Additionally, a set
               of extension points are defined here so that we can
               easily invoke common targets on all child C++ builds
               using a single command (e.g. "cpp.compile").
-->
<project name="cpp">

	<!-- ================================================================================= -->
	<!--                                 General Settings                                  -->
	<!-- ================================================================================= -->
	<description>
		The parent C++ build file containing project-wide C++ properties and extension
		points so that we can address all C++ compiling targets with one command.
	</description>

	<!-- ================================================= -->
	<!--                Common Properties                  -->
	<!-- ================================================= -->
	<!-- Common Properties -->
	<property name="cpp.src.dir"               location="${src.dir}/cpp"/>

	<!-- msvc compiler properties -->
	<property name="msvc.debug.defaults"   value="/Zi /MDd /Od /EHsc /GR /W0"/>
	<property name="msvc.release.defaults" value="/MD /Od /EHsc /GR /W0"/>

	<!-- ================================================= -->
	<!--                Extension Points                   -->
	<!-- ================================================= -->
	<!-- extension points for C++ child builds to attach to -->
	<extension-point name="clean"   extensionOf="master.clean"/>
	<extension-point name="compile" extensionOf="master.compile" description="Compile all C++ interfaces and tests"/>
	<extension-point name="test"    extensionOf="master.test"/>
	<extension-point name="sandbox" extensionOf="master.sandbox"/>

	<!-- work out our build profile -->
	<generateCppBuildProfile supportedCompilers="gcc4,vc8,vc9,vc10"
	                         supportedArchitectures="x86,amd64"
	                         supportedBuilds="debug,release"/>


	<!-- ================================================= -->
	<!--                task: cpp.strict                   -->
	<!-- ================================================= -->
	<!-- Tasks to enable the strict or relaxed build style -->
	<!-- In a strict build, if a compiler we require is not installed the build will be failed.
	     By default, builds are not strict -->
	<target name="strict" description="Fail the build if required compiler is not installed">
		<property name="cpp.strict" value="true"/>
	</target>
	
</project>

